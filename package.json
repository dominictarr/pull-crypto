{
  "name": "pull-crypto",
  "description": "crypto via pull-streams",
  "version": "1.1.1",
  "homepage": "https://github.com/dominictarr/pull-crypto",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/pull-crypto.git"
  },
  "dependencies": {
    "pull-stream": "2",
    "bops": "~0.1.1"
  },
  "devDependencies": {
    "tape": "~1.0.2",
    "stream-to-pull-stream": "~1.2.3",
    "hyperquest": "~0.1.8"
  },
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "license": "MIT",
  "readme": "# pull-crypto\n\n[pull-stream](https://github.com/dominictarr/pull-stream)\nwrapper for node's crypto module.\n\n## hash\n\na Sink stream that will callback the hash of a stream (i.e. a file)\n\n``` js\nvar pc = require('pull-crypto')\nvar pull = require('pull-stream')\n\npull(\n  pull.values(['a', 'b', 'c']),\n  pc.hash(function (err, sum) {\n    if(err) throw err\n    console.log(sum)\n  })\n)\n```\nwhich will output: `a9993e364706816aba3e25717850c26c9cd0d89d`\n\n## encrypt\n\na Through stream that takes an options object and returns encrypted data in callback (if callback is supplied) or stream so it can be piped to a consumer.\n\nBelow has no callback and returns a stream so you pipe to another stream.\n\n```js\nvar pc = require('pull-crypto')\nvar pull = require('pull-stream')\nvar opts = {\n  encrypt : {\n    inputEncoding : 'utf8',\n    encoding : 'base64'\n  },\n  decrypt : {\n    inputEncoding : 'base64',\n    encoding : 'utf8'\n  },\n  algorithm : 'aes-256-cbc',\n  password : 'secret'\n}\n   \npull(\n  pull.values(['a', 'b', 'c']),\n  pc.encrypt(opts),\n  pull.log()\n)\n```\nNote : options object is intentionally verbose in above example to show all properties. The only thing you are required to pass in is the `password` property. This will ensure your data is not encrypted with any default password. If not supplied it will throw!\n\nOptions Object defaults :\n* algorithm : `aes-256-cbc`\n* encrypt.inputEncoding : `utf8`\n* encrypt.encoding : `hex`\n* decrypt.inputEncoding : `hex`\n* decrypt.encoding : `utf8`\n\nBelow is same example as above with Callback supplied. It also has a slimmed down options object.\n\n```js\nvar pc = require('pull-crypto')\nvar pull = require('pull-stream')\nvar opts = {\n  password : 'secret'\n}\n   \npull.values(['a', 'b', 'c'])\n  .pipe(pc.encrypt(opts, function(err, encrypted) {\n    if (err) throw err\n    console.log(encrypted)\n  }))\n```\n\n## decrypt\n\nthis is the same as encrypt. It can either be piped down stream or take a callback. Below we take encrypted `base64` data and pipe it to the `decoder` and then print out the decrypted data to the console, which yields `abc`.\n\n```js\nvar pc = require('pull-crypto')\nvar pull = require('pull-stream')\nvar opts = {\n  password : 'secret'\n}\n   \npull.values(['9f6199ceee0c2a6f36137fa80eeb2a59'])\n  .pipe(pc.decrypt(opts))\n  .pipe(pull.log())\n```\n\nYou can also pass a callback to `decrypt` as shown above with the `encrypt` example.\n\n### algorithms\n\nYou can choose any algorithm that is available through node's `crypto.getCiphers()` method. You can take a look in the tests folder for the `allCiphers.js` file. This will go attempt to encrypt and decrypt values using all possible ciphers on your system.\n\n### encoding\n\nAgain see node's `crypto` module for details on possible input and output encoding.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dominictarr/pull-crypto/issues"
  },
  "_id": "pull-crypto@1.1.1",
  "dist": {
    "shasum": "5b10b28b90131ed05f5293fa02d3000799b487c2"
  },
  "_from": "pull-crypto@",
  "_resolved": "https://registry.npmjs.org/pull-crypto/-/pull-crypto-1.1.1.tgz"
}
